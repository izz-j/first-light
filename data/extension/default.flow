;; -*- mode: common-lisp -*-

(define-call-flow :default (:enabled t)
  (flow initialize-phase
        (flow-state entry/initialize-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       pending-tasks)))

        ;; High level description of this flow:
        ;;
        ;; 0. If pre-init is empty, go to 7.
        ;; 1. straight up move components from pre-init to init.
        ;; 2. straight up move actors from pre-init to init.
        ;; 3. run initalize-component by-type in init.
        ;; 4. realize-components from init to active.
        ;; 5. realize-actors from init to active.
        ;; 6. realize-phase-commit (new name: WHILE-INITIALIZE-PHASE)
        ;;    make a decision:
        ;;    If still stuff in pre-init go to 1
        ;;    If nothing in pre-init, go to 7.
        ;; 7. exit flow

        ;; 0
        (flow-state pending-tasks :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (if (pending-preinit-tasks-p core-state)
                           init-components
                           exit/initialize-phase))))

        ;; 1
        (flow-state init-components :reset ()
                    (selector
                     (lambda (core-state)
                       (values
                        :type-policy
                        (component-preinit-by-type-view (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (component/preinit->init core-state component)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       init-actors)))
        ;; 2
        (flow-state init-actors :reset ()
                    (selector
                     (lambda (core-state)
                       (values
                        :identity-policy
                        (actor-preinit-db (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (actor/preinit->init core-state component)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       protocol-initialize-components)))

        ;; 3
        (flow-state protocol-initialize-components :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-init-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       ;; NOTE: If any new actors/components are generated
                       ;; here. They end up in pre-init state.
                       (initialize-component component (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       realize-components)))
        ;; 4
        (flow-state realize-components :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-init-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (component/init->active core-state component)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       realize-actors)))

        ;; 5
        (flow-state realize-actors :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (actor-init-db (tables core-state)))))

                    (action
                     (lambda (core-state inst)
                       (actor/init->active core-state inst)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       while-initialize-phase)))

        ;; 6
        (flow-state while-initialize-phase :reset ()
                    (selector nil)
                    (action nil)

                    (transition
                     (lambda (core-state)
                       ;; Running PROTOCOL-INITIALIZE-COMPONENTS may have
                       ;; cause additional actors/components to be created, so
                       ;; we check for that here and repeat as needed.
                       (if (pending-preinit-tasks-p core-state)
                           ;; Then do the process over again.
                           init-components
                           ;; Or exit this phase, we're done initializing.
                           exit/initialize-phase))))

        ;; 7
        (flow-state exit/initialize-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil)))

  (flow active-phase
        (flow-state entry/active-phase :reset ()
                    (selector nil)

                    (action
                     (lambda (core-state unused)
                       (declare (ignore unused))
                       ;; TODO: right spot for this? Maybe in render
                       ;; flow-state.
                       (setf (shaders (context core-state))
                             (compiled-shaders (shaders core-state)))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       physics-loop)))

        (flow-state physics-loop :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (let ((display (display core-state)))
                         (box.fm:tick
                          display
                          (hz display)
                          (lambda ()
                            ;; Run the user's physics-update protocol
                            (execute-flow core-state
                                          :default
                                          'active-phase
                                          'protocol-physics-update
                                          :come-from-state-name
                                          :ef-physics-update)

                            ;; Then update ALL transforms to current
                            ;; local/model
                            (fl.comp.transform:map-nodes
                             #'fl.comp.transform::transform-node
                             (actor-component-by-type
                              (scene-tree core-state)
                              'fl.comp.transform:transform))

                            ;; Then, determine if any physics collisions
                            ;; happened and do whatever needs to be done.
                            (execute-flow core-state
                                          :default
                                          'active-phase
                                          'physics-collisions
                                          :come-from-state-name
                                          :ef-physics-collisions)))

                         ;; Then produce the interpolated model. Note that
                         ;; physics collisions used ONLY the physics
                         ;; computations to do their collisions instead of
                         ;; the interpolated models.
                         (fl.comp.transform::interpolate-transforms
                          (actor-component-by-type (scene-tree core-state)
                                                   'fl.comp.transform:transform)
                          (box.fm:alpha display)))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       make-active-camera-view)))

        (flow-state protocol-physics-update :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-active-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state inst)
                       (physics-update-component inst (context core-state))))

                    (transition nil))

        ;; TODO: PHYSICS-COLLISIONS is not yet implemented, there may be
        ;; more work here than this single state. This will compute
        ;; collisions and then inform the recipients of those
        ;; collisions as desired in the boundary regions components
        ;; (yet to be written).
        (flow-state physics-collisions :reset ()
                    (selector nil)

                    (action
                     (lambda (core-state inst)
                       (declare (ignore core-state inst))))

                    (transition nil))

        ;; TODO: Should I run flow destroy-phase just before this next
        ;; flow-state so that those actors/components aren't even drawn?
        ;; Currently, I defer all actor/component destruction until the end of
        ;; frame, far after this. I don't know what is better yet.

        (flow-state make-active-camera-view :reset ()
                    (selector
                     (lambda (core-state)
                       (symbol-macrolet ((camera (active-camera
                                                  (context core-state))))
                         (unless (and camera (fl.comp.camera::activep camera))
                           (let ((new-camera (fl.comp.camera::find-active-camera
                                              core-state)))
                             (setf camera new-camera)))
                         (values :identity-policy camera))))

                    (action
                     (lambda (core-state camera)
                       (when (and camera (fl.comp.camera::activep camera))
                         (fl.comp.camera:compute-camera-view
                          camera
                          (context core-state)))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       protocol-update-component)))

        (flow-state protocol-update-component :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-active-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state inst)
                       (update-component inst (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       protocol-render-component)))

        (flow-state protocol-render-component :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-active-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state inst)
                       (render-component inst (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       exit/active-phase)))

        (flow-state exit/active-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil)))

  (flow destroy-phase
        (flow-state entry/destroy-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       pending-predestroy-tasks)))

        ;; TODO: Fix me.

        ;; This should handle if I spawn an actor/component and then destroy it
        ;; in the same function, etc, etc.
        ;;
        ;; 0. If pre-destroy (actor and components) is empty, go to 5
        ;;
        ;; 1. move components (<= ttl 0) in pre-destroy from init/active to
        ;;    destroy.
        ;;
        ;; 2. move root actors (<= ttl 0) (and their components)
        ;;    in pre-destroy from init/active to destroy.
        ;;
        ;; 3. Recursively move all actor children found in destroy from
        ;;    init/active into destroy, Set any actor/component ttl in any
        ;;    discovered instances to 0, since the root with ttl <= 0 overrides
        ;;    all pending ttls for anything that may be in the process of being
        ;;    destroyed.
        ;;
        ;; 4. A) decrement ttl by frame-time for predestroying components
        ;;    B) decrement ttl by frame-time for predestroying actors.
        ;;
        ;; 5. If destroy is empty, go to 11.
        ;;
        ;; 6. run DESTROY-COMPONENT by-type in destroy.
        ;;
        ;; 7. disconnect all destroyed actors from the scene heirarchy.
        ;;
        ;; 8. release-components (and remove from actors) from destroy.
        ;;
        ;; 9. release-actors (which now should be empty) from destroy.
        ;;
        ;; 10. restart to see if anything else got marked to be destroyed
        ;;     during this entire process, goto 0.
        ;;
        ;; 11. exit flow.

        ;; 0
        (flow-state pending-predestroy-tasks :reset ()
                    (selector nil)

                    (action nil)

                    (transition
                     (lambda (core-state)
                       ;; Start of a while construct
                       (if (pending-predestroy-tasks-p core-state)
                           prepare-predestroy-components
                           pending-destroy-tasks))))

        ;; 1
        (flow-state prepare-predestroy-components :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (component-predestroy-view (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (unless (plusp (ttl component))
                         (component/init-or-active->destroy
                          core-state
                          component))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       prepare-predestroy-actors)))

        ;; 2
        (flow-state prepare-predestroy-actors :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (actor-predestroy-view (tables core-state)))))

                    (action
                     (lambda (core-state actor)
                       (unless (plusp (ttl actor))
                         (actor/init-or-active->destroy core-state actor))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       destroy-actor-children)))

        ;; 3
        (flow-state destroy-actor-children :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               ;; NOTE: We get the keys here because the action
                               ;; will be adding values to this hash table as we
                               ;; iterate over the keys. We need to copy the
                               ;; list of keys in order to satisfy the traversal
                               ;; rules of hash tables.
                               (alexandria:hash-table-keys
                                (actor-destroy-db (tables core-state))))))

                    (action
                     (lambda (core-state actor)
                       ;; NOTE: See selector for this flow-state.
                       ;;
                       ;; NOTE: We check for the actor here since we could have
                       ;; had an empty list returned in the selector. That will
                       ;; call this function with actor bound to nil.
                       (when actor
                         (actor/destroy-descendants core-state actor))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       decrement-component-destroy-timer)))
        ;; 4 A
        (flow-state decrement-component-destroy-timer :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (component-predestroy-view (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (component/countdown-to-destruction
                        core-state
                        component)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       decrement-actor-destroy-timer)))

        ;; 4 B
        (flow-state decrement-actor-destroy-timer :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (actor-predestroy-view (tables core-state)))))
                    (action
                     (lambda (core-state actor)
                       (actor/countdown-to-destruction core-state actor)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       pending-destroy-tasks)))

        ;; 5
        (flow-state pending-destroy-tasks :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (if (pending-destroy-tasks-p core-state)
                           protocol-destroy-component
                           exit/destroy-phase))))

        ;; 6
        (flow-state protocol-destroy-component :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-destroy-by-type-view
                                (tables core-state)))))

                    (action
                     (lambda (core-state component)
                       (destroy-component component (context core-state))))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       disconnect-destroyed-actors)))

        ;; 7
        (flow-state disconnect-destroyed-actors :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (actor-destroy-db (tables core-state)))))

                    (action
                     (lambda (core-state actor)
                       (actor/disconnect core-state actor)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       release-components)))

        ;; 8
        (flow-state release-components :reset ()
                    (selector
                     (lambda (core-state)
                       (values :type-policy
                               (component-destroy-by-type-view
                                (tables core-state)))))
                    (action
                     (lambda (core-state component)
                       (component/destroy->released core-state component)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       release-actors)))

        ;; 9
        (flow-state release-actors :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               (actor-destroy-db (tables core-state)))))

                    (action
                     (lambda (core-state actor)
                       (actor/destroy->released core-state actor)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       restart-predestroy-phase)))

        ;; 10
        (flow-state restart-predestroy-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       ;; The end of a while construct...
                       pending-predestroy-tasks)))

        ;; 11
        (flow-state exit/destroy-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil)))

  (flow maintenance-phase
        (flow-state entry/maintenance-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       shader-refresh)))

        (flow-state shader-refresh :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy
                               core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (maybe-recompile-shaders core-state)
                       nil))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       exit/maintenance-phase)))

        (flow-state exit/maintenance-phase :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil)))

  (flow perform-one-frame
        (flow-state entry/perform-one-frame :reset ()
                    (selector nil)
                    (action nil)
                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       initialize-phase)))

        (flow-state initialize-phase :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'initialize-phase
                                     'entry/initialize-phase
                                     :come-from-state-name
                                     :ef-realize-phase)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       active-phase)))

        (flow-state active-phase :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'active-phase
                                     'entry/active-phase
                                     :come-from-state-name
                                     :ef-active-phase)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       destroy-phase)))

        (flow-state destroy-phase :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'destroy-phase
                                     'entry/destroy-phase
                                     :come-from-state-name
                                     :ef-destroy-phase)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       maintenance-phase)))

        (flow-state maintenance-phase :reset ()
                    (selector
                     (lambda (core-state)
                       (values :identity-policy core-state)))

                    (action
                     (lambda (core-state inst)
                       (declare (ignore inst))
                       (execute-flow core-state
                                     :default
                                     'maintenance-phase
                                     'entry/maintenance-phase
                                     :come-from-state-name
                                     :ef-maintenance-phase)))

                    (transition
                     (lambda (core-state)
                       (declare (ignore core-state))
                       exit/do-next-frame)))

        (flow-state exit/do-next-frame :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil))

        (flow-state exit/game-over :reset ()
                    (selector nil)
                    (action nil)
                    (transition nil))))
